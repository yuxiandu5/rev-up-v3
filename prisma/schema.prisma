generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String
  emailVerifiedAt DateTime?
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  refreshTokens RefreshToken[]
  oneTimeTokens OneTimeToken[]
}

// Rotating, single‑use refresh tokens. Store **hashes** only.
model RefreshToken {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash     String    @unique // sha256(plaintext)
  prevTokenHash String?   @unique // anti‑replay chain
  userAgent     String?
  ipAddress     String?
  createdAt     DateTime  @default(now())
  expiresAt     DateTime
  consumedAt    DateTime? // set when rotated/used
  revokedAt     DateTime?

  @@index([userId, expiresAt])
}

// Hashed one‑time tokens for email verify & password reset
model OneTimeToken {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       TokenType
  tokenHash  String    @unique // sha256(plaintext token)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  consumedAt DateTime?
  userAgent  String?
  ipAddress  String?

  @@index([userId, type, expiresAt])
}

enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
}
